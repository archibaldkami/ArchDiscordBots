import discord
from discord.ext import commands, tasks
from typing import Dict, List, Optional
import logging
from datetime import datetime, timedelta
import json
import asyncio
from pathlib import Path
import matplotlib.pyplot as plt
import io

class Monitoring(commands.Cog):
    """–ö–æ–≥ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–¥—ñ–π —Ç–∞ –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    
    def __init__(self, bot: commands.Bot):
        """Initialize the monitoring cog with a bot instance."""
        if not isinstance(bot, (commands.Bot, commands.AutoShardedBot)):
            raise TypeError("Expected commands.Bot or commands.AutoShardedBot instance")
            
        self.bot = bot
        self.logger = logging.getLogger('Monitoring')
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            'messages': 0,
            'edits': 0,
            'deletions': 0,
            'files': 0,
            'reactions': 0,
            'commands': 0,
            'errors': 0
        }
        
        # –ö–µ—à –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
        self.hourly_stats = {}
        self.daily_stats = {}
        
        # Don't start tasks in __init__, wait for cog_load
        
    async def cog_load(self):
        """Start background tasks when the cog is loaded."""
        self.stats_update.start()
        self.daily_report.start()
    
    def cog_unload(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–≥–∞."""
        self.stats_update.cancel()
        self.daily_report.cancel()
    
    @tasks.loop(minutes=5.0)
    async def stats_update(self):
        """–§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            # Wait for bot to be ready before updating status
            await self.bot.wait_until_ready()
            
            current_hour = datetime.utcnow().strftime('%Y-%m-%d-%H')
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
            self.hourly_stats[current_hour] = self.stats.copy()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            await self._save_stats_to_db()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            if self.bot is not None and self.bot.is_ready():
                status_text = f"Monitoring {len(self.bot.guilds)} servers | {self.stats['messages']} msgs"
                await self.bot.change_presence(
                    status=discord.Status.online, 
                    activity=discord.CustomActivity(
                        name=status_text
                    )
                )
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    @tasks.loop(hours=24.0)
    async def daily_report(self):
        """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç."""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤
            alert_channel_id = self.bot.config['monitoring']['alert_channel']
            for guild in self.bot.guilds:
                channel = discord.utils.get(guild.channels, name=alert_channel_id)
                if channel:
                    report = await self._generate_daily_report()
                    await channel.send(embed=report)
        
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {str(e)}")
    
    async def _generate_daily_report(self) -> discord.Embed:
        """–ì–µ–Ω–µ—Ä—É—î —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ embed."""
        embed = discord.Embed(
            title="üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
            color=discord.Color.blue(),
            timestamp=datetime.utcnow()
        )
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        embed.add_field(
            name="üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            value=f"–ù–æ–≤—ñ: {self.stats['messages']}\n"
                  f"–†–µ–¥–∞–≥–æ–≤–∞–Ω—ñ: {self.stats['edits']}\n"
                  f"–í–∏–¥–∞–ª–µ–Ω—ñ: {self.stats['deletions']}",
            inline=True
        )
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —Ä–µ–∞–∫—Ü—ñ–π
        embed.add_field(
            name="üìé –í–∫–ª–∞–¥–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∞–∫—Ü—ñ—ó",
            value=f"–§–∞–π–ª–∏: {self.stats['files']}\n"
                  f"–†–µ–∞–∫—Ü—ñ—ó: {self.stats['reactions']}",
            inline=True
        )
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–º–∏–ª–æ–∫
        embed.add_field(
            name="‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
            value=f"–ö–æ–º–∞–Ω–¥–∏: {self.stats['commands']}\n"
                  f"–ü–æ–º–∏–ª–∫–∏: {self.stats['errors']}",
            inline=True
        )
        
        # –î–æ–¥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        chart = await self._generate_activity_chart()
        if chart:
            file = discord.File(chart, filename="activity.png")
            embed.set_image(url="attachment://activity.png")
        
        return embed, file if chart else None
    
    async def _generate_activity_chart(self) -> Optional[io.BytesIO]:
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏."""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            hours = []
            message_counts = []
            
            now = datetime.utcnow()
            for i in range(24):
                hour = now - timedelta(hours=i)
                hour_key = hour.strftime('%Y-%m-%d-%H')
                
                hours.insert(0, hour.strftime('%H:00'))
                message_counts.insert(0, self.hourly_stats.get(hour_key, {}).get('messages', 0))
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
            plt.figure(figsize=(10, 5))
            plt.plot(hours, message_counts, marker='o')
            plt.title('–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ 24 –≥–æ–¥–∏–Ω–∏')
            plt.xlabel('–ì–æ–¥–∏–Ω–∞')
            plt.ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å')
            plt.xticks(rotation=45)
            plt.grid(True)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —É –±–∞–π—Ç–æ–≤–∏–π –ø–æ—Ç—ñ–∫
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫—É: {str(e)}")
            return None
    
    async def _update_bot_status(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∑ –ø–æ—Ç–æ—á–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é."""
        try:
            status_text = f"Monitoring {len(self.bot.guilds)} servers | {self.stats['messages']} msgs"
            await self.bot.change_presence(
                activity=discord.Activity(
                    type=discord.ActivityType.watching,
                    name=status_text
                )
            )
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞: {str(e)}")
    
    async def _save_stats_to_db(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è db_manager
        pass
    
    @commands.group(name='monitor', invoke_without_command=True)
    @commands.has_role('SyncAdmin')
    async def monitor(self, ctx):
        """–ì—Ä—É–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."""
        await ctx.send("–î–æ—Å—Ç—É–ø–Ω—ñ –ø—ñ–¥–∫–æ–º–∞–Ω–¥–∏: stats, report, reset")
    
    @monitor.command(name='stats')
    async def show_stats(self, ctx):
        """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        embed = discord.Embed(
            title="üìä –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            color=discord.Color.blue(),
            timestamp=datetime.utcnow()
        )
        
        for key, value in self.stats.items():
            embed.add_field(
                name=key.title(),
                value=str(value),
                inline=True
            )
        
        await ctx.send(embed=embed)
    
    @monitor.command(name='reset')
    async def reset_stats(self, ctx):
        """–°–∫–∏–¥–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stats = {key: 0 for key in self.stats}
        await ctx.send("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∏–Ω—É—Ç–æ")
    
    @monitor.command(name='report')
    async def generate_report(self, ctx):
        """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∑–≤—ñ—Ç –∑–∞ –∑–∞–ø–∏—Ç–æ–º."""
        report, file = await self._generate_daily_report()
        if file:
            await ctx.send(embed=report, file=file)
        else:
            await ctx.send(embed=report)
    
    # Event listeners –¥–ª—è –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    @commands.Cog.listener()
    async def on_message(self, message):
        """–í—ñ–¥—Å—Ç–µ–∂—É—î –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
        if not message.author.bot:
            self.stats['messages'] += 1
            if message.attachments:
                self.stats['files'] += len(message.attachments)
    
    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        """–í—ñ–¥—Å—Ç–µ–∂—É—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
        if not after.author.bot and before.content != after.content:
            self.stats['edits'] += 1
    
    @commands.Cog.listener()
    async def on_message_delete(self, message):
        """–í—ñ–¥—Å—Ç–µ–∂—É—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
        if not message.author.bot:
            self.stats['deletions'] += 1
    
    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        """–í—ñ–¥—Å—Ç–µ–∂—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∞–∫—Ü—ñ–π."""
        if not user.bot:
            self.stats['reactions'] += 1
    
    @commands.Cog.listener()
    async def on_command(self, ctx):
        """–í—ñ–¥—Å—Ç–µ–∂—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥."""
        self.stats['commands'] += 1
    
    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        """–í—ñ–¥—Å—Ç–µ–∂—É—î –ø–æ–º–∏–ª–∫–∏ –∫–æ–º–∞–Ω–¥."""
        self.stats['errors'] += 1
        self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ {ctx.command}: {str(error)}")

async def setup(bot):
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫–æ–≥ –¥–ª—è –±–æ—Ç–∞."""
    await bot.add_cog(Monitoring(bot))